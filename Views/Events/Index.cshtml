@model EventsViewModel

@{
    ViewBag.Title = "Events";
}

<div class="fancyLeft text-left">

    @{
        var now = DateTimeOffset.Now;
        var prev = now.AddMonths(-1);
        var next = now.AddMonths(1);
        var currentStarting = Model.Current.Starting - DateTimeOffset.UtcNow;
        var totalSecondsLeft = Math.Floor(currentStarting.TotalSeconds);
    }

    <h1 id="tabTitle">Next Event In:</h1>
    <h2 style="margin-top: 10px; display: none;" id="next-event-countdown">@totalSecondsLeft</h2>
    @*<h2 style="margin-top: 10px" id="next-event-countdown1">@initialCountDown.TotalSeconds</h2>*@
    @*<h2 style="margin-top: 10px" id="next-event-countdown2">@initialCountDown.ToString("g")</h2>*@

</div>

<div class="fancyRight text-right">
    <h1>@Model.Current.Name</h1>
    <h2 class="local-date">@Model.Current.Starting.ToString("O")</h2>
</div>

<img id="eventsHeaderImage" alt="War of Rights Event Schedule" src="@Url.Content("~/img/during-the-american-civil-war.jpg")" class="imageMaxWidth">

<div id="currentsEventOptions" style="display: none;"></div>

<div id="calendar">
    <div id="monthsDisplay" class="fancyLeft">
        @await Html.PartialAsync("_Month", model: new EventsViewModel()
        {
            EventTemplates = Model.ScheduledEvents.Where(x => x.Starting.Month == prev.Month).ToList(),
            Current = new Event()
            {
                Starting = prev
            }
        })

        @await Html.PartialAsync("_Month", model: new EventsViewModel()
        {
            EventTemplates = Model.ScheduledEvents.Where(x => x.Starting.Month == now.Month).ToList(),
            Current = new Event()
            {
                Starting = now
            }
        })

        @await Html.PartialAsync("_Month", model: new EventsViewModel()
        {
            EventTemplates = Model.ScheduledEvents.Where(x => x.Starting.Month == next.Month).ToList(),
            Current = new Event()
            {
                Starting = next
            }
        })
    </div>

    <div id="eventTemplates" class="fancyRight">
        @foreach (var e in Model.EventTemplates)
        {
            <h2>@e.Name</h2>
            <h3>
                @e.Starting.ToString("dddd, HH:mm:ss") GMT
                @if (e.Occurring != EventOccurrence.Once)
                {
                    @:- @e.Occurring.ToString()
                }
            </h3>
            <p class="text-center">@e.Description</p>
        }
    </div>
</div>

@section scripts {
    <script src="lib/moment.js/moment.min.js"></script>
    <script src="lib/moment-timezone/moment-timezone-with-data.min.js"></script>

    <script>

        function displayLocalDates() {

            $(".local-date").each(function(index, item) {
                var $item = $(item);

                var dateAsISO8601 = $item.text();
                var localDate = moment(dateAsISO8601).format("dddd, HH:mm:ss");

                $item.text(localDate);
            });

            $(".local-date-tz").each(function (index, item) {
                var $item = $(item);

                var dateAsISO8601 = $item.text();
                var localDate = moment(dateAsISO8601).format("dddd, HH:mm:ss");

                var timezone = moment.tz.guess();
                localDate += " " + moment.tz(timezone).format("z");

                $item.text(localDate);
            });
        }

        $(document).ready(function() {

            displayLocalDates();

            var eventsHeaderImage = $("#eventsHeaderImage");
            var currentEventOptionsContainer = $("#currentsEventOptions");

            function focusCurrentEventOptionsContainer(e) {
                $([document.documentElement, document.body]).animate({
                        scrollTop: eventsHeaderImage.offset().top
                    }, 500);
            }

            currentEventOptionsContainer.on('click',
                ".LinkButtonH1, .optionsExit, .optionsContainerDarkening",
                function(e) {
                    e.preventDefault();
                    currentEventOptionsContainer.hide();
                });

            $("#monthsDisplay .displayCurrentEvents").on('click',
                function(e) {
                    e.preventDefault();

                    var me = $(this);
                    var url = me.attr('href');

                    $.get(url,
                        function(r) {

                            if (!r) {
                                // no-content
                                return;
                            }

                            currentEventOptionsContainer.html(r);
                            currentEventOptionsContainer.show();
                            focusCurrentEventOptionsContainer();
                        });


                });

            var eventCountDownTimer;
            function startEventCountDownTimer(totalSeconds, display) {

                if (totalSeconds < 0) {
                    display.text("EVENT IN PROGRESS");
                    eventCountDownTimer = clearTimeout(eventCountDownTimer);
                    return;
                }

                var hours = Math.floor(totalSeconds / 3600);
                var minutes = Math.floor((totalSeconds % 3600) / 60);
                var seconds = Math.floor(totalSeconds % 60);

                eventCountDownTimer = setTimeout(function () {

                    hours = hours < 10 ? "0" + hours : hours;
                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;

                    display.text(hours + ":" + minutes + ":" + seconds);

                    if (display.is(":hidden")) {
                        display.show();
                    }

                    startEventCountDownTimer(--totalSeconds, display);

                }, 1000);
            }

            var totalSeconds = @totalSecondsLeft;
            var container = $("#next-event-countdown");
            startEventCountDownTimer(totalSeconds, container);

        });
    </script>
}
